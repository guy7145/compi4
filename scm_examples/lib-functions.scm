(boolean? #f)
(boolean? #t)
(boolean? 3)
(integer? 1)
(integer? 0)
(pair? '(1 2 3))
(pair? '())
(pair? 1)
(car '(1 2))
;(cdr '(1 2))
(car '(2))
(cdr '(2))
(cons 1 2)
(car (cons 1 2))
(cdr (cons 1 2))
(let ((x (cons 1 2))) (set-cdr! x 3) x)
(string-length "asdnlsdkfj")
(string-length "124d")
(string-length "")
(char->integer #\a)
(char->integer #\b)
(char->integer #\c)
(char->integer #\9)
(char->integer #\0)
(integer->char 123)
;(integer->char 1)
(integer->char 99)
(integer->char 98)
(zero? 0)
(zero? 1)
(zero? 2)
(string-ref "abc d f  edf" 0)
(string-ref "abc d f  edf" 1)
(string-ref "abc d f  edf" 2)
(string-ref "abcdfedf" 7)
(let ((x "abcde")) (string-set! x 1 #\a) x)
(let ((x "abcde")) (string-set! x 2 #\t) x)
(let ((a "abcde")) (string-set! a 3 #\5) a)
(string-set! "abcd" 0 #\c)
(define f00 1)
(define foo 2)
(string->symbol "asdasdasdasd")
(string->symbol "f00")
(string->symbol "foo")
(symbol->string 'those)
(symbol->string 'are)
(symbol->string 'all)
(symbol->string 'symbols)
(symbol->string 'f00)
(symbol->string 'foo)

